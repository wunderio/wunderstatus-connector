<?php

/**
 * Implements hook_requirements().
 */
function wunderstatus_requirements($phase) {
  $requirements = [];
  $settings_link = l('Configure', 'admin/config/system/wunderstatus');

  if ($phase == 'runtime') {
    $requirements['wunderstatus_key']['title'] = t('Wunderstatus authentication key');
    if (!empty(wunderstatus_get_key())) {
      $requirements['wunderstatus_key']['value'] = wunderstatus_get_key();
    } else {
      $requirements['wunderstatus_key']['value'] = 'Wunderstatus authentication key not specified.';
      $requirements['wunderstatus_key']['description'] = $settings_link;
      $requirements['wunderstatus_key']['severity'] = REQUIREMENT_ERROR;
    }
    $requirements['wunderstatus_manager_endpoint_url']['title'] = t('Wunderstatus manager endpoint URL');
    if (!empty(wunderstatus_get_manager_endpoint_url())) {
      $requirements['wunderstatus_manager_endpoint_url']['value'] = wunderstatus_get_manager_endpoint_url();
    } else {
      $requirements['wunderstatus_manager_endpoint_url']['value'] = 'Wunderstatus manager endpoint URL not specified.';
      $requirements['wunderstatus_manager_endpoint_url']['description'] = $settings_link;
      $requirements['wunderstatus_manager_endpoint_url']['severity'] = REQUIREMENT_ERROR;
    }
  }
  return $requirements;
}

/**
 * Implements hook_menu().
 */
function wunderstatus_menu() {
  $items = [];

  $items['admin/config/system/wunderstatus'] = [
    'title' => 'Wunderstatus settings',
    'description' => 'Wunderstatus settings',
    'page callback' =>'drupal_get_form',
    'page arguments' => ['wunderstatus_admin'],
    'access callback' => 'user_access',
    'access arguments' => ['administer wunderstatus settings'],
  ];

  return $items;
}

/**
 * Implements hook_permissions().
 */
function wunderstatus_permission() {
  return [
    'administer wunderstatus settings' => [
      'title' => t('Administer Wunderstatus settings'),
      'description' => t('Configure Wunderstatus options like authentication key'),
    ],
  ];
}

/**
 * Provides Settings Form.
 */
function wunderstatus_admin() {
  $form = [];

  $form['authentication'] = [
    '#type' => 'fieldset',
    '#title' => t('Authentication'),
  ];

  $form['authentication']['wunderstatus_key'] = [
    '#type' => 'textfield',
    '#title' => t('Wunderstatus authentication key'),
    '#required' => TRUE,
    '#default_value' => variable_get('wunderstatus_key'),
  ];

  $form['manager_site'] = [
    '#type' => 'fieldset',
    '#title' => t('Wunderstatus manager'),
  ];

  $form['manager_site']['wunderstatus_manager_endpoint_url'] = [
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#maxlength' => 120,
    '#size' => 65,
    '#required' => TRUE,
    '#default_value' => wunderstatus_get_manager_endpoint_url(),
  ];

  $form['manager_site']['wunderstatus_auth_username'] = [
    '#type' => 'textfield',
    '#title' => t('Auth username'),
    '#required' => FALSE,
    '#default_value' => variable_get('wunderstatus_auth_username'),
  ];

  $form['manager_site']['wunderstatus_auth_password'] = [
    '#type' => 'textfield',
    '#title' => t('Auth password'),
    '#required' => FALSE,
    '#default_value' => variable_get('wunderstatus_auth_password'),
  ];

  return system_settings_form($form);
}

/**
 * Implements hook_cron().
 *
 * Sends module information twice per day.
 */
function wunderstatus_cron() {
  $last_cron_run = variable_get('cron_last');
  $last_successful_wunderstatus_run = wunderstatus_get_last_successful_run_timestamp();
  $twelve_hours_in_seconds = 43200;
  $should_run = empty($last_successful_wunderstatus_run) || ($last_cron_run - $last_successful_wunderstatus_run) > $twelve_hours_in_seconds;

  if ($should_run) {
    $response = wunderstatus_send_info();
    wunderstatus_handle_response($response);
  }
}

function wunderstatus_send_info() {
  $response = FALSE;

  if (empty(wunderstatus_get_key())) {
    wunderstatus_log('Wunderstatus authentication key is not set.', [], WATCHDOG_WARNING);
  }
  elseif (empty(wunderstatus_get_manager_endpoint_url())) {
    wunderstatus_log('Wunderstatus manager endpoint URL is not set.', [], WATCHDOG_WARNING);
  }
  else {

    $headers = array();

    $headers['Content-Type'] = 'application/json';

    $wunderstatus_auth_username = variable_get('wunderstatus_auth_username');
    $wunderstatus_auth_password = variable_get('wunderstatus_auth_password');

    // Include the auth header only if the credentials are set.
    if (!empty($wunderstatus_auth_password) && !empty($wunderstatus_auth_username)) {
      $headers['Authorization'] = 'Basic ' . base64_encode($wunderstatus_auth_username . ':' . $wunderstatus_auth_password);
    }

    $options = [
      'method' => 'POST',
      'data' => wunderstatus_build_request_body(),
      'timeout' => 5,
      'headers' => $headers,
    ];

    $response = drupal_http_request(wunderstatus_get_manager_endpoint_url(), $options);
  }

  return $response;
}

/**
 * @param $response Object
 */
function wunderstatus_handle_response($response) {
  if (isset($response->code) && in_array($response->code, [200])) {
    wunderstatus_update_last_successful_run_timestamp();
    wunderstatus_log('Status information sent.', [], WATCHDOG_NOTICE);
  } else {
    wunderstatus_log(
      'Status information send failed. Response: @response',
      ['@response' => print_r($response, TRUE)],
      WATCHDOG_WARNING
    );
  }
}

function wunderstatus_get_key() {
  return variable_get('wunderstatus_key');
}

function wunderstatus_get_manager_endpoint_url() {
  return variable_get('wunderstatus_manager_endpoint_url');
}

function wunderstatus_get_last_successful_run_timestamp() {
  return variable_get('wunderstatus_last_successful_run_timestamp');
}

function wunderstatus_update_last_successful_run_timestamp() {
  variable_set('wunderstatus_last_successful_run_timestamp', time());
}

function wunderstatus_build_request_body() {
  return json_encode([
    'key' => wunderstatus_get_key(),
    'modules' => wunderstatus_get_version_info(),
    'siteName' => wunderstatus_get_site_name(),
    'siteUuid' => wunderstatus_get_site_uuid(),
  ]);
}

/**
  * @return array Modules and core system versions. Includes:
  * - Drupal core version
  * - PHP version
  * - Database version
  */
function wunderstatus_get_version_info() {
  $all_modules = system_get_info('module');
  $version_info = [];
  $version_info[] = wunderstatus_get_drupal_version();

  foreach ($all_modules as $module_name => $module) {
    $core_module = !empty($module['package']) && $module['package'] == 'Core';

    if (!$core_module) {
      $version = !empty($module['version']) ? $module['version'] : t('Unspecified');
      $version_info[] = $module_name . ' ' . $version;
    }
  }

  return $version_info;
}

function wunderstatus_get_drupal_version() {
  return 'Drupal ' . VERSION;
}

function wunderstatus_get_site_name() {
  return variable_get('site_name', '');
}

function wunderstatus_get_site_uuid() {
  $site_uuid = variable_get('wunderstatus_site_uuid');

  if (empty($site_uuid)) {
    $site_uuid = md5(time());
    variable_set('wunderstatus_site_uuid', $site_uuid);
  }

  return $site_uuid;
}

function wunderstatus_log($message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL) {
  watchdog('wunderstatus', $message, $variables, $severity, $link);
}
