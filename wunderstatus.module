<?php

/**
 * @file
 * Contains wunderstatus.module.
 */

use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function wunderstatus_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.wunderstatus':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Wunderstatus connector sends site status data to central service') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_requirements().
 */
function wunderstatus_requirements($phase) {
  $requirements = [];
  $state = \Drupal::state();
  $settings_link = Link::createFromRoute('Configure', 'wunderstatus.settings');

  if ($phase == 'runtime') {
    $requirements['wunderstatus_key']['title'] = t('Wunderstatus authentication key');
    if (!empty($state->get('wunderstatus_key'))) {
      $requirements['wunderstatus_key']['value'] = $state->get('wunderstatus_key');
    } else {
      $requirements['wunderstatus_key']['value'] = 'Wunderstatus authentication key not specified.';
      $requirements['wunderstatus_key']['description'] = $settings_link;
      $requirements['wunderstatus_key']['severity'] = REQUIREMENT_ERROR;
    }
    $requirements['wunderstatus_manager_endpoint_url']['title'] = t('Wunderstatus manager endpoint URL');
    if (!empty($state->get('wunderstatus_manager_endpoint_url'))) {
      $requirements['wunderstatus_manager_endpoint_url']['value'] = $state->get('wunderstatus_manager_endpoint_url');
    } else {
      $requirements['wunderstatus_manager_endpoint_url']['value'] = 'Wunderstatus manager endpoint URL not specified.';
      $requirements['wunderstatus_manager_endpoint_url']['description'] = $settings_link;
      $requirements['wunderstatus_manager_endpoint_url']['severity'] = REQUIREMENT_ERROR;
    }
  }
  return $requirements;
}

/**
 * Implements hook_cron().
 *
 * Sends module information twice per day.
 */
function wunderstatus_cron() {
  $last_cron_run = \Drupal::state()->get('system.cron_last');
  $last_successful_wunderstatus_run = wunderstatus_get_last_successful_run_timestamp();
  $twelve_hours_in_seconds = 43200;
  $should_run = empty($last_successful_wunderstatus_run) || ($last_cron_run - $last_successful_wunderstatus_run) > $twelve_hours_in_seconds;

  if ($should_run) {
    $response = \Drupal::service('wunderstatus.service')->sendModuleInfo();
    wunderstatus_handle_response($response);
  }
}

function wunderstatus_get_last_successful_run_timestamp() {
  return \Drupal::state()->get('wunderstatus_last_successful_run_timestamp');
}

function wunderstatus_update_last_successful_run_timestamp() {
  return \Drupal::state()->set('wunderstatus_last_successful_run_timestamp', time());
}

function wunderstatus_handle_response($response) {
  if ($response) {
    wunderstatus_update_last_successful_run_timestamp();
  }
}